" ---------- Leader 系按键 ----------
"
" ;c        复制至公共剪贴板        [仅选择模式]
" ;a        复制所有至公共剪贴板    [Normal 模式可用]
" ;v        从公共剪贴板粘贴        [全模式可用]

" ----------- 文本操作 -----------
"
" dw de d0 dd   --删除 
" cw ce c0 cc   --删除并进入插入模式
" yw ye y0 yy   --复制
" vw ve v0 vv   --选中


" 判断操作系统类型
if(has('win32') || has('win64'))
    let g:isWIN = 1
    let g:isMAC = 0
else
    if system('uname') =~ 'Darwin'
        let g:isWIN = 0
        let g:isMAC = 1
    else
        let g:isWIN = 0
        let g:isMAC = 0
    endif
endif

" 判断是否处于 GUI 界面
if has('gui_running')
    let g:isGUI = 1
else
    let g:isGUI = 0
endif


" ----------- 全局配置 -----------
"
" 关闭 vi 兼容模式
set nocompatible

" leader 按键
let mapleader=";"

" 自动检测文件类型, 并根据文件类型显示代码高亮, 设置缩进格式, 加载对应插件
filetype plugin indent on

" 当文件在外部被修改，自动更新该文件
set autoread

" 使用鼠标
set mouse=a
set selection=exclusive
set selectmode=mouse,key


" ---------- 字体和颜色 ----------
"
" 语法高亮
syntax on

" 设置配色方案和字体
if g:isWIN
    " colorscheme solarized
    colorscheme molokai
    " set guifont=DejaVu_Sans_Mono:h12:cANSI
    set guifont=Source_Code_Pro:h12:cANSI
elseif g:isMAC
    " colorscheme solarized
    colorscheme molokai
    " set guifont=DejaVu\ Sans\ Mono\ :h12
    set guifont=Source\ Code\ Pro\ :h12
else
    " colorscheme solarized
    colorscheme molokai
    " set guifont=DejaVu\ Sans\ Mono\ 12
    set guifont=Source\ Code\ Pro\ 12
endif


" ----------- 文字处理 -----------
"
" 使用空格来替换Tab
set expandtab

" 设置所有的 Tab 和缩进为4个空格
set tabstop=4

" 设定《和》命令移动时的宽度为4
set shiftwidth=4
set smarttab

" 每行80个字符
set textwidth=80
set formatoptions+=mM

" 退格键一次可以删掉一个 Tab 的空格数量
set softtabstop=4

" 自动对齐
set autoindent

" 智能对齐
set smartindent
set ai

" 突出显示当前行
set cursorline

" 自动换行
set wrap

" C/C++ 缩进模式
set cindent

" 英文单词换行时不被截断
set linebreak

" 行内替换
set gdefault

" 只能大小写敏感，只要有一个字母大写，就大小写敏感，否则不敏感
set ignorecase smartcase

" 基于缩进进行代码折叠
set foldmethod=indent
" zc  当前位置折叠
" zr  打开折叠
" zR  全部展开
" zM  全部折叠
" 自定义 空格键 开关折叠

" 打开 VIM 时不折叠
set foldlevelstart=99



" ----------- VIM 界面 -----------
"
"启动时不显示援助乌干达儿童提示
set shortmess=atI

" 显示标尺
set ruler

" 设置命令行的高度
set cmdheight=2

" 显示行数
set number

" 退格键可用
set backspace=indent,eol,start

" 关闭错误信息响铃
set noerrorbells

" 关闭使用可视响铃代替呼叫
set novisualbell

" 高亮显示匹配的括号
set showmatch

" 不闪烁
set novisualbell

" 显示输入的命令
set showcmd

" 设置背景颜色
set background=dark

" 竖直 split 时，在右边开启
set splitright

" 水平 split 时，在下边开启
set splitbelow

" 显示状态栏
set laststatus=2

" 状态行显示的内容
" set statusline=%F%m%r%h%w\ \ \ \ [FORMAT=%{&ff}]\ \ \ \ [TYPE=%Y]\ \ \ \ [POS=%l,%v][%p%%]\ \ \ \ %{strftime(\"%d/%m/%y\ \ \ \ -\ \ \ \ %H:%M\")}

" <F3>显示/隐藏工具栏/菜单栏
if g:isGUI
	set guioptions+=c
	set guioptions-=m
	set guioptions-=T
	set guioptions-=r
	set guioptions-=L
	nmap <silent><F3> :if &guioptions=~#'T'<Bar> 
		\set guioptions-=T<Bar>
		\set guioptions-=m<Bar>
		\set guioptions-=r<Bar>
		\set guioptions-=L<Bar>
	\else<Bar>
		\set guioptions+=T<Bar>
		\set guioptions+=m<Bar>
		\set guioptions+=r<Bar>
		\set guioptions+=L<Bar>
	\endif<CR>
endif

" 启动位置
" winpos 235 235

" 窗口大小
set lines=50 columns=100

" ----------- 编码设置 -----------
"
" 设置 VIM 内部编码
set encoding=utf-8

" 设置编辑文件时的编码
set fileencoding=utf-8

" 设置 VIM 能识别的编码
set fileencodings=utf-8,ucs-bom,cp936,gb18030,gb2312,big5,cuc-jp,cuc-kr,latin

" 设置终端编码
set termencoding=utf-8

" 防止特殊符号无法显示
set ambiwidth=double

" 设置语言编码
set langmenu=zh_CN.UTF-8
set helplang=cn

" 解决 console 输出乱码
language messages zh_CN.utf-8

" 解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" ----------- 其它设置 -----------
"
" 在处理为保存或只读文件的时候，弹出确认
set confirm

" 置空错误铃声的终端代码
set vb t_vb=

" 共享剪贴板
set clipboard+=unnamed

" 自动保存
set autowrite

" undodir 文件存放地址
set undodir=~/.undodir

" 不需要备份文件
set nobackup
"
" 不创建临时文件
set noswapfile

set hidden

set updatetime=300

" ------------ vim-plug 插件 ------------
"
call plug#begin('~/.vim/plugged')

Plug 'jiangmiao/auto-pairs'
"
" 设置要自动配对的符号
let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"'}
" 添加要自动配对的符号<>
let g:AutoPairs['<']='>'
" 设置插件打开/关闭的快捷键，默认为ALT+p
let g:AutoPairsShortcutToggle = '<M-p>'


Plug 'skywind3000/asyncrun.vim'
"
" 自动打开6行高度的quickfix窗口
let g:asyncrun_open = 6
" 任务结束时候响铃提醒
let g:asyncrun_bell = 1
" 项目标志
let g:asyncrun_rootmarks = ['.svn', '.git', '.root', '_darcs', 'build.xml']

" autocmd User AsyncRunStart call asyncrun#quickfix_toggle(6, 1


" 用来提供一个导航目录的侧边栏
Plug 'scrooloose/nerdtree'
"
" 有目录树结构的文件浏览插件
" 在标准模式下输入<F2>调用插件
nmap <F2> :NERDTreeToggle<CR>

" 启动Vim时自动打开NERDTree
" autocmd vimenter * NERDTre

"只剩NERDTree时自动关闭
" autocmd bufenter * if(winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endi

" 显示行号
let NERDTreeShowLineNumbers=1
" 显示增强
let NERDTreeChristmasTree=1
" 自动调整焦点
let NERDTreeAutoCenter=1
" 设置NERDTree子窗口位置
let NERDTreeWinPos='left'
" 设置NERDTree子窗口宽度
let NERDTreeWinSize=35
" 高亮显示当前文件或目录
let NERDTreeHightCursorline=1
" 不显示隐藏文件
let NERDTreeShowHidden=0
" NERDTree子窗口不显示冗余帮助信息
let NERDTreeMinimalUl=1
" 删除文件时自动删除文件对应buffer
let NERDTreeAutoDeleteBuffer=1
" 显示书签列表
let NERDTreeShowBookmarks=1
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 过滤: 所有指定文件和文件夹不显示
let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '\.vscode', '__pycache__']

" 怎么忽略显示状态
let g:NERDTreeShowIgnoredStatus=1
let g:NERDTreeIndicatorMapCustom={
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \}

" NERDTree操作帮助
" ?             :快速帮助文档
" o             :打开一个目录或者文件，创建的是buffer，也可以用来打开标签
" go    		：打开一个文件，但是光标仍然留在NERDTree，创建的是buffer
" t             :打开一个文件，创建的标签，对书签同样有效
" T             :打开一个文件，但是光标仍然留在NERDTree，创建的是标签
" i             :水平分割创建文件的窗口。创建的是buffer
" gi    		:水平分割创建文件的窗口，但是光标仍然留在NERDTree
" s             :垂直分割创建文件的窗口，创建的是buffer
" x             :收起当前打开的目录
" X             :收起所有打开的目录
" e             :以文件管理方式打开选中的目录
" u             :打开上层目录
" m             :显示文件系统菜单 （添加、删除、移动等操作）
" D             :删除书签
" P             :转到当前根目录
" p             :转到光标的上一级目录
" K             :跳转到第一个子路径
" J             :跳转到最后一个子路径
" r             :刷新光标所在目录
" R             :刷新当前根路径
" I             :显示或者不显示隐藏文件
" f             :打开和关闭文件过滤器
" q             :关闭NERDTree
" A             :全屏显示NWRDTree，或者关闭全屏


" 可以在导航目录中看到 git 版本信息
Plug 'Xuyuanp/nerdtree-git-plugin'
"
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

let g:NERDTreeShowIgnoredStatus = 1


Plug 'Xuyuanp/nerdtree-git-plugin'


" 补全代码插件
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
"
" 语言插件
" Rust          ==>     coc-rls
" GOLang        ==>     
" JAVA          ==>     coc-java
" Python        ==>     coc-python 
" javascript    ==>     coc-tsserver
" xml           ==>     coc-xml 
" html          ==>     coc-html 
" php           ==>     coc-phpls
" json          ==>     coc-json 
" ruby          ==>     coc-solargraph
"
" 安装
" CocInstall coc-marketplace
"
" 列出所有可用的扩展名
" CocList marketplace
"
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" <Tab> <S-Tab> 键上下切换
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" <cr> 确认补全
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"


" 语法检测
Plug 'w0rp/ale'
"
" 显示状态栏
let g:ale_sign_column_always = 1
" 不高亮行
let g:ale_set_highlights = 0
" 自定义error和warning图标
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
" 显示Linter名称，出错和警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" 在状态栏中显示错误或警告 
let g:airline#extensions#ale#enabled = 1
" 使用quickfix列表而非loclist
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
" 有错误或警告时显示loclist或quickfix项目的窗口
let g:ale_open_list = 1
" 保存时修复
let g:ale_fix_on_save = 1
" 文件保存时，显示警告
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
" 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
" <Leader>d查看错误或警告的详细信息
nmap <Leader>d :ALEDetail<CR>

"使用clang对c和c++进行语法检查，对python使用pylint进行语法检查
let g:ale_linters = {
\   'rust': ['rustfmt', 'cargo'],
\   'c++': ['clang','gcc'],
\   'c': ['clang','gcc'],
\   'go': ['gofmt'],
\   'java': ['javac'],
\   'python': ['autopep8', 'pylint'],
\   'fortran': ['gcc'],
\	'javascript': ['eslint'],
\   'yaml': ['yamllint'],
\}

" ale显示错误的列表高度
let g:ale_list_window_size = 5
let g:ale_c_clang_options = '--target=i86_64-w64-mingw -std=c11 -Wall'

" JAVA 在中文系统上，错误和警告信息都会乱码：
let g:ale_java_javac_options = '-encoding UTF-8  -J-Duser.language=en'

" 安装语言工具
" autopep8
" pip install autopep8    （Windows \ Mac)    
" pip3 install autopep8   （Linux）
" npm install eslint –g   （eslint javascript）


" 查看当前代码文件中的变量和函数列表的插件，
" 可以切换和跳转到代码中对应的变量和函数的位置
" 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
Plug 'majutsushi/tagbar'
nmap  <F8>：TagbarToggle <CR>


let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

" ctags程序的路径
let g:tabar_ctags_bin='ctags'
" 窗口宽度设置
let g:tabar_width=35
" 在窗口左侧显示
let g:tagbar_RIGHT=1
" 开启自动预览(随着光标在标签上的移动，顶部会出现一个实时的预览窗口)
" let g:tagbar_autopreview=1
" 关闭排序，即按标签本身在文件中的位置排序
let g:tagbar_sort=0


" 比ctrlp 强大的模糊搜索工具
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
"
" 搜索当前目录下的文件
" :LeaderfFile
" <leader>f
" 搜索当前的 Buffer
" :LeaderfBuffer 
" <leader>b
" 搜索最近使用过的文件,就是Mru
" :LeaderfMru
" 搜索当前文件的函数
" :LeaderfFunction
" 搜索当前文件中的某个单词
" LeaderfLine


" 版本控制插件，支持git、svn
Plug 'mhinz/vim-signify'


" 显示缩进指示线的插件
Plug 'Yggdroot/indentLine'
"
" 开启/关闭 indentLine 插件
let g:indentLine_enable = 1
" 设置 indentLine 显示的缩进线
let g:indentLine_char_list = ['¦']


" 快速对齐插件
Plug 'junegunn/vim-easy-align'
"
" Start interactive EasyAlign in visual mode (e.g. vipga)
" 以可视模式启动交互式EasyAlign（例如vipga）
xmap ga <Plug>(EasyAlign)
"
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
" 启动交互式EasyAlign以获取动画/文本对象（例如gaip）
nmap ga <Plug>(EasyAlign)


" Solarized 主题（亮/暗）
Plug 'altercation/vim-colors-solarized'
" molokai 主题
Plug 'tomasr/molokai'


" Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态
Plug 'vim-airline/vim-airline'
" 状态栏主题
Plug 'vim-airline/vim-airline-themes'


"所有插件都必须写在plg#begin和end之间 (All of your Plugins must be added before the following line)
call plug#end()

" 用法：
" 	PlugStatus		检查状态
" 	PlugInstall		安装插件
" 	PlugUpdate		更新插件
" 	PlugDiff		查看更新后的更改  X回滚之间更新
" 	PlugClean		删除插件
" 	PlugUpgrade		更新vim-plug插件自身


" ----------- 自定义按键 -----------
"
" <leader>; 保存文件
nnoremap <leader>; :w<cr>

" Ctrl + s 保存文件
nnoremap <C-s> :w<cr>
inoremap <C-s> :w<cr>
nnoremap <C-S> :w<cr>
inoremap <C-S> :w<cr>

" 可视模式下按 <leader>y 将内容写入系统寄存器
vnoremap <leader>y "+y

" 按 <leader>p 将系统寄存器中的内容粘贴出来
nnoremap <leader>p "+p

" 按 <leader>k 向上移动半屏
nnoremap <leader>k <c-u>

" 按 <leader>j 向下移动半屏
nnoremap <leader>j <c-d>

" 分屏窗口移动
map <leader>j <C-w>j
map <leader>k <C-w>k
map <leader>h <C-w>h
map <leader>l <C-w>l

" 空格键 开关折叠
nnoremap <space> za

" 配对括号
inoremap ' ''<ESC>i
inoremap " ""<ESC>i
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i
" "inoremap { {<CR>}<ESC><S-o>

" <F9> 开关 quickfix
noremap <F9> :call asyncrun#quickfix_toggle(8)<cr>
